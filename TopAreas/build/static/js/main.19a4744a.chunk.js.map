{"version":3,"sources":["URLCollector.jsx","App.js","index.js"],"names":["URLCollector","forwardRef","props","ref","useState","urlType","copied","setCopyStatus","result","setResult","btnRef","useRef","reformat","input","search","indexOf","multiSearch","status","reformatted","slice","replace","reformatPolygon","newURL","console","log","propertyType","reformatMultisearchPolygon","useImperativeHandle","calcNewURL","className","id","toString","required","placeholder","onClick","navigator","clipboard","writeText","setTimeout","backgroundColor","originalURL","document","getElementById","value","includes","App","key","updateKey","collectors","updateCollectors","style","paddingTop","width","maxWidth","margin","rel","href","btns","getElementsByClassName","length","i","click","calcAll","marginRight","concat","padding","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.19a4744a.chunk.js","sourcesContent":["import React, {\r\n  Component,\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\n\r\nconst URLCollector = forwardRef((props, ref) => {\r\n  const [urlType, setType] = useState(\"city\");\r\n  const [copied, setCopyStatus] = useState(0);\r\n  const [result, setResult] = useState(null);\r\n  const btnRef = useRef();\r\n\r\n  const copyToClip = () => {\r\n    navigator.clipboard.writeText(result);\r\n    setCopyStatus(1);\r\n    setTimeout(() => {\r\n      setCopyStatus(0);\r\n    }, 2000);\r\n  };\r\n\r\n  const calcNewURL = () => {\r\n    const originalURL = document.getElementById(props.id).value;\r\n    \r\n    if (originalURL.includes(\"polygon\")) {\r\n      if (originalURL.includes(\"propertyType\")){\r\n        reformatPolygon(originalURL)\r\n        console.log(\"REGULAR POLYGON\")\r\n      }\r\n      else {\r\n        reformatMultisearchPolygon(originalURL)\r\n        console.log(\"MULTISEARCH POLYGON\")\r\n      }\r\n    }\r\n    else {\r\n      reformat(originalURL)\r\n      console.log(\"REGULAR CITY LINK\")\r\n    }\r\n\r\n  };\r\n\r\n  const reformat = (input) => {\r\n    let search = input.indexOf(\"m/search\");\r\n    let multiSearch = input.indexOf(\"multi_search\");\r\n    let status = input.indexOf(\"status=1\");\r\n    let section = input.slice(multiSearch, status + 8);\r\n    let reformatted = \"/search?\" + section + input.slice(search + 8);\r\n    let multicat = input.indexOf(\"&multi_cat\");\r\n    setResult(reformatted.replace(\"%7C\", \",\"));\r\n  };\r\n\r\n  const reformatPolygon = (input) => {\r\n    let search = input.indexOf(\"m/search\");\r\n    var newURL = input;\r\n    console.log(newURL);\r\n    console.log(typeof newURL);\r\n    //var reformatted = \"/search?\"\r\n    //reformatted += url.replace(url.slice(url.indexOf(\"view\"), url.indexOf(\"_view\") + 5), \"\")\r\n    let propertyType = newURL.indexOf(\"propertyType\");\r\n    let status = newURL.indexOf(\"status=1\");\r\n    let reformatted =\r\n      \"/search?\" +\r\n      newURL.slice(propertyType, status + 8) +\r\n      newURL.slice(newURL.indexOf(\"#?q\"), newURL.indexOf(\"offset=0\") + 8);\r\n    setResult(reformatted.replace(\"%7C\", \",\"));\r\n  };\r\n\r\n  const reformatMultisearchPolygon = (input) => {\r\n    let search = input.indexOf(\"m/search\");\r\n    var newURL = input;\r\n    console.log(newURL);\r\n    console.log(typeof newURL);\r\n    //var reformatted = \"/search?\"\r\n    //reformatted += url.replace(url.slice(url.indexOf(\"view\"), url.indexOf(\"_view\") + 5), \"\")\r\n    let multiSearch = newURL.indexOf(\"multi_search\");\r\n    let status = newURL.indexOf(\"status=1\");\r\n    let reformatted =\r\n      \"/search?\" +\r\n      newURL.slice(multiSearch, status + 8) +\r\n      newURL.slice(newURL.indexOf(\"#?q\"), newURL.indexOf(\"offset=0\") + 8);\r\n    setResult(reformatted.replace(\"%7C\", \",\"));\r\n  };\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    calcNewURL() {\r\n      setResult(urlType);\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <div className=\"animate__animated animate__slideInLeft\">\r\n      <div className=\"urlCollWrapper\">\r\n        {/*<div className=\"tabSelectorWrapper\">\r\n          <ul>\r\n            <li\r\n              style={{\r\n                boxShadow: urlType == \"city\" ? \"0 0 3px lightgray\" : \"none\",\r\n                backgroundColor:\r\n                  urlType == \"city\" ? \"rgb(255,123,90)\" : \"white\",\r\n                color: urlType == \"city\" ? \"white\" : \"lightgray\",\r\n              }}\r\n              onClick={() => setType(\"city\")}\r\n            >\r\n              City, Zip, County\r\n            </li>\r\n            <li\r\n              style={{\r\n                boxShadow: urlType == \"poly\" ? \"0 0 3px lightgray\" : \"none\",\r\n                backgroundColor:\r\n                  urlType == \"poly\" ? \"rgb(255,123,90)\" : \"white\",\r\n                color: urlType == \"poly\" ? \"white\" : \"lightgray\",\r\n              }}\r\n              onClick={() => setType(\"poly\")}\r\n            >\r\n              Polygon\r\n            </li>\r\n            <li\r\n              style={{\r\n                boxShadow: urlType == \"special\" ? \"0 0 3px lightgray\" : \"none\",\r\n                backgroundColor:\r\n                  urlType == \"special\" ? \"rgb(255,123,90)\" : \"white\",\r\n                color: urlType == \"special\" ? \"white\" : \"lightgray\",\r\n              }}\r\n              onClick={() => setType(\"special\")}\r\n            >\r\n              Special Filter\r\n            </li>\r\n          </ul>\r\n        </div>*/}\r\n        <div>\r\n          <input\r\n            id={props.id.toString()}\r\n            className=\"urlInput\"\r\n            required\r\n            placeholder=\"Enter your URL...\"\r\n          ></input>\r\n        </div>\r\n\r\n        <div className=\"resultsArea\">\r\n          <div className=\"result\">\r\n            <p ref={btnRef} className=\"message\">\r\n              {result !== null ? result : \"\"}\r\n            </p>\r\n          </div>\r\n          <button\r\n            className=\"clip-btn\"\r\n            onClick={() => copyToClip()}\r\n            className=\"copy-btn\"\r\n            disabled={result !== null ? \"\" : \"true\"}\r\n            style={{\r\n              backgroundColor:\r\n                result !== null\r\n                  ? \"rgb(255, 123, 90)\"\r\n                  : \"rgba(255, 123, 90, 0.3)\",\r\n            }}\r\n          >\r\n            <i className={copied === 0 ? \"fa fa-clipboard\" : \"fa fa-check\"}></i>\r\n          </button>\r\n          <button className=\"go-btn\" onClick={() => calcNewURL()}>\r\n            GO\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\nexport default URLCollector;\r\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Container, Col } from \"react-bootstrap/\";\nimport * as React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport URLCollector from \"./URLCollector\";\n\n\nfunction App() {\n  const [key, updateKey] = useState(1)\n\n  const [collectors, updateCollectors] = useState([\n    <URLCollector id={0}></URLCollector>,\n  ]);\n\n  const addCollector = () => {\n    updateCollectors(collectors.concat(<URLCollector id={key}></URLCollector>));\n    updateKey(key + 1)\n  };\n\n  const calcAll = () => {\n    var btns = document.getElementsByClassName(\"go-btn\");\n    console.log(btns.length);\n    for (var i = 0; i <= btns.length - 1; i++) {\n      btns[i].click();\n    }\n  };\n\n  return (\n    <div style={{paddingTop: \"40px\"}}>\n      <div className=\"background\"></div>\n      \n        <h1 className=\"title\">Top Areas</h1>\n        <h5 className=\"subtitle\">Creating your top areas links has never been easier! Just paste your URL into the text box, click on the type of link you want to create, and click GO! You can even copy the link directly to your clipboard!</h5>\n\n      <div style={{ width: \"95%\", maxWidth: \"1000px\", margin: \"0 auto\" }}>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\n        />\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\n        />\n\n        \n\n        {collectors}\n\n        <div className=\"under-sect\">\n          <button\n            className=\"add-btn\"\n            onClick={() => calcAll()}\n            style={{ marginRight: \"10px\" }}\n          >\n            CONVERT ALL\n          </button>\n          <button className=\"add-btn\" onClick={() => addCollector()}>\n            <i\n              className=\"fa fa-plus\"\n              style={{ padding: \"0\", margin: \"0 10px 0 0\" }}\n            ></i>{\" \"}\n            ADD\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}